<?php
/*********************************************************************************
  ** The contents of this file are subject to the vtiger CRM Public License Version 1.0
   * ("License"); You may not use this file except in compliance with the License
   * The Original Code is:  vtiger CRM Open Source
   * The Initial Developer of the Original Code is vtiger.
   * Portions created by vtiger are Copyright (C) vtiger.
   * All Rights Reserved.
  *
 ********************************************************************************/
ini_set('include_path',ini_get('include_path'). PATH_SEPARATOR . '../../..'); 

require_once('include/utils/utils.php');
require_once('include/logging.php');

// Get the list of Invoice for which Recurring is enabled.

$svcname = "RecurringInvoice";
$servicePIDFile = "logs/{$svcname}-service.pid";

if(file_exists($servicePIDFile)) {
	die("Service $svcname already running! Check $servicePIDFile");
} else {
	$servicePIDFp = fopen($servicePIDFile, 'a');
}

global $adb, $log;
$log =& LoggerManager::getLogger('RecurringInvoice');
$log->debug("invoked RecurringInvoice");

$sql="SELECT vtiger_salesorder.salesorderid, recurring_frequency, start_period, end_period, last_recurring_date,
		 payment_duration, invoice_status FROM vtiger_salesorder
		 INNER JOIN vtiger_crmentity ON vtiger_salesorder.salesorderid = vtiger_crmentity.crmid AND vtiger_crmentity.deleted = 0
		 INNER JOIN vtiger_invoice_recurring_info ON vtiger_salesorder.salesorderid = vtiger_invoice_recurring_info.salesorderid
		 WHERE DATE_FORMAT(start_period,'%Y-%m-%d') <= ? AND DATE_FORMAT(end_period,'%Y-%m-%d') >= ?;";
$currentDate = date('Y-m-d');
$result = $adb->pquery($sql, array($currentDate, $currentDate));
$no_of_salesorder = $adb->num_rows($result);

for($i=0; $i<$no_of_salesorder;$i++) {
	$salesorder_id = $adb->query_result($result, $i,'salesorderid');
	$start_period = $adb->query_result($result, $i,'start_period');
	$end_period = $adb->query_result($result, $i,'end_period');
	$last_recurring_date = $adb->query_result($result, $i,'last_recurring_date');
	$recurring_frequency = $adb->query_result($result, $i,'recurring_frequency');
	
	if (empty($last_recurring_date)) {
		$last_recurring_date = '1970-01-01';
	}
	$cDate = new DateTime($currentDate);
	$lDate = new DateTime($last_recurring_date);
	$sDate = new DateTime($start_period);
	$expectedDate = clone $lDate;
	
	if (strtolower($recurring_frequency) == 'daily') {
		$interval = 'P1D';
		$format = 'd';
	} elseif (strtolower($recurring_frequency) == 'weekly') {
		$interval = 'P7D';
		//get day of week
		$format = 'N';
	} elseif (strtolower($recurring_frequency) == 'monthly') {
		$interval = 'P1M';
		//get day of month
		$format = 'j';
	} elseif (strtolower($recurring_frequency) == 'quarterly') {
		$interval = 'P3M';
		//get day of month
		$format = 'j';
	} elseif (strtolower($recurring_frequency) == 'yearly') {
		$interval = 'P1Y';
		//get day of month
		$format = 'Y';
	} else {
		continue;
	}

	$expectedDate->add(new DateInterval($interval));

	$sDoW = $sDate->format($format);
	$eDoW = $expectedDate->format($format);
	//last day of month
	$ssDoM = $sDate->format('t');
	$slDoM = $expectedDate->format('t');
	$diff = 0;
	if ($format == 'j' && $sDoW == $ssDoM) {
		$tmpDate = clone $expectedDate;
		$diff = $slDoM - $eDoW;
		//start month had more days than following month
		if ($lDate != $tmpDate->sub(new DateInterval($interval))) {
			$diff = -$eDoW;
		}
	} elseif ($format == 'Y') {
		$expectedDate->setDate($expectedDate->format('Y'), $sDate->format('m'), $sDate->format('d'));
	} elseif ($format != 'd') {
		$diff = $sDoW - $eDoW;
	}
	if ($diff < 0) {
		$diff = abs($diff);
		$ops = 'sub';
	} else {
		$ops = 'add';
	}
	$expectedDate->$ops(new DateInterval('P'.$diff.'D'));
		
	if ($expectedDate <= $cDate) {
		createInvoice($salesorder_id);
		$adb->pquery('UPDATE vtiger_invoice_recurring_info SET last_recurring_date = ? WHERE salesorderid = ?', array($currentDate, $salesorder_id));
	}
}

/** Close and remove the PID file. */
if($servicePIDFp) {
	fclose($servicePIDFp);
	unlink($servicePIDFile);
}

/* Function to create a new Invoice using the given Sales Order id */
function createInvoice($salesorder_id) {
	require_once('include/utils/utils.php');
	require_once('modules/SalesOrder/SalesOrder.php');
	require_once('modules/Invoice/Invoice.php');
	require_once('modules/Users/Users.php');

	global $log, $adb;
	global $current_user;

	// Payment duration in days
	$payment_duration_values = Array(
        'net 1 day' => '1',
        'net 5 days' => '5',
        'net 7 days' => '7',
        'net 10 days' => '10',
        'net 15 days' => '15',
		'net 30 days' => '30',
		'net 45 days' => '45',
		'net 60 days' => '60'
	);

	if(!$current_user) {
		$current_user = Users::getActiveAdminUser();
	}
	$so_focus = new SalesOrder();
	$so_focus->id = $salesorder_id;
	$so_focus->retrieve_entity_info($salesorder_id,"SalesOrder");
	foreach($so_focus->column_fields as $fieldname=>$value) {
		$so_focus->column_fields[$fieldname] = decode_html($value);
	}

	$focus = new Invoice();
	// This will only fill in the basic columns from SO to Invoice and also Update the SO id in new Invoice
	$focus = getConvertSoToInvoice($focus,$so_focus,$salesorder_id);
    
	// Pick up the Payment due date based on the Configuration in SO
	$payment_duration = $so_focus->column_fields['payment_duration'];
	$due_duration = $payment_duration_values[trim(strtolower($payment_duration))];
	$durationinsec = mktime(0,0,0,date('m'),date('d')+$due_duration,date('Y'));

	// Cleanup focus object, to duplicate the Invoice.
	$focus->id = '';
	$focus->mode = '';
	$focus->column_fields['invoicestatus'] = $so_focus->column_fields['invoicestatus'];
	$focus->column_fields['invoicedate'] = date('Y-m-d');
	$focus->column_fields['duedate'] = date('Y-m-d', $durationinsec);

	// Additional SO fields to copy -> Invoice field name mapped to equivalent SO field name
	$invoice_so_fields = Array (
		'txtAdjustment' => 'txtAdjustment',
		'hdnSubTotal' => 'hdnSubTotal',
		'hdnGrandTotal' => 'hdnGrandTotal',
		'hdnTaxType' => 'hdnTaxType',
		'hdnDiscountPercent' => 'hdnDiscountPercent',
		'hdnDiscountAmount' => 'hdnDiscountAmount',
		'hdnS_H_Amount' => 'hdnS_H_Amount',
		'assigned_user_id' => 'assigned_user_id',
		'currency_id' => 'currency_id',
		'conversion_rate' => 'conversion_rate',
	);
	foreach($invoice_so_fields as $invoice_field => $so_field) {
		$focus->column_fields[$invoice_field] = $so_focus->column_fields[$so_field];
	}
	$focus->_salesorderid = $salesorder_id;
	$focus->_recurring_mode = 'recurringinvoice_from_so';
	$focus->save("Invoice");
}



?>
